from telebot.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from database.db_requests import db
# PM keyboards

'''
Legend
y - yes
n - no

u - user
    t - tasks
        new - new task
            1-5 - step number
            s - task start related
            e - task end related

        today - show tasks for today
        cal - chose date to show tasks
    p - projects
a - project administrator    


'''


# main menu keyboard
main_menu_keyb = InlineKeyboardMarkup()
main_menu_keyb.add(InlineKeyboardButton('–ó–∞–¥–∞—á–∏', callback_data='u;t'))
main_menu_keyb.add(InlineKeyboardButton('–ü—Ä–æ–µ–∫—Ç—ã', callback_data='p'))


# task menu keyboard
task_keyb = InlineKeyboardMarkup()
task_keyb.add(InlineKeyboardButton('–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data='u;t;date;now'))
task_keyb.add(InlineKeyboardButton('–ó–∞–¥–∞—á–∏ –Ω–∞ –¥–∞—Ç—É', callback_data='u;t;date;cal'))
task_keyb.add(InlineKeyboardButton('–ó–∞–¥–∞—á–∏ –Ω–∞ 7 –¥–Ω–µ–π', callback_data='u;t;date;week'))
task_keyb.add(InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É', callback_data='u;t;new;0r'))
task_keyb.add(InlineKeyboardButton('–°–∫–∞—á–∞—Ç—å –∑–∞–¥–∞—á–∏', callback_data='u;export'))
task_keyb.add(InlineKeyboardButton('–ú–µ–Ω—é', callback_data='u;menu'))

no_task_keyb = InlineKeyboardMarkup()
no_task_keyb.add(InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É', callback_data='u;t;new;0r'))
no_task_keyb.add(InlineKeyboardButton('–ú–µ–Ω—é', callback_data='u;menu'))

# task name input keyboard
name_keyb = InlineKeyboardMarkup()
name_keyb.add(InlineKeyboardButton('–í –º–µ–Ω—é', callback_data='u;menu'),
              InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='u;t;new;0r'),
              InlineKeyboardButton('–î–∞–ª–µ–µ', callback_data='u;t;new;1'))

def step_keyb(menu_data, reset_data, next_step_data):
    keyb = InlineKeyboardMarkup()
    keyb.add(InlineKeyboardButton('–í –≥–ª–∞–≤–∞–Ω–æ–µ –º–µ–Ω—é', callback_data=menu_data),
             InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å', callback_data=reset_data),
             InlineKeyboardButton('–î–∞–ª–µ–µ', callback_data=next_step_data))
    return keyb


# task cat keyboard
def cat_keyb(prefix):
    keyb = InlineKeyboardMarkup()
    cats = db.get_categories()
    for i in range(len(cats)//2+len(cats)%2):
        if 2 * i + 1 < len(cats):
            keyb.add(InlineKeyboardButton(cats[2 * i][1], callback_data=f'{prefix};'+str(cats[2 * i][0])),
                         InlineKeyboardButton(cats[2 * i + 1][1], callback_data=f'{prefix};'+str(cats[2 * i+1][0])))
        else:
            keyb.add(InlineKeyboardButton(cats[2 * i][1], callback_data=f'{prefix};'+str(cats[2 * i][0])))
    keyb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='u;menu'),
                 InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='u;t;new;0'))
    return keyb


# priority choice keyboard
def priority_keyb(prefix):
    keyb = InlineKeyboardMarkup()
    keyb.add(InlineKeyboardButton('–í—ã—Å–æ–∫–∏–π üî¥', callback_data=f'{prefix};3'))
    keyb.add(InlineKeyboardButton('–°—Ä–µ–¥–Ω–∏–π üü°', callback_data=f'{prefix};2'))
    keyb.add(InlineKeyboardButton('–ù–∏–∑–∫–∏–π üü¢', callback_data=f'{prefix};1'))
    return keyb



# reminder keyboard
def reminder_keyb(prefix):
    keyb = InlineKeyboardMarkup()
    keyb.add(InlineKeyboardButton('–∑–∞ 10 –º–∏–Ω—É—Ç', callback_data=f'{prefix};10'), InlineKeyboardButton('–∑–∞ 30 –º–∏–Ω—É—Ç', callback_data=f'{prefix};30'))
    keyb.add(InlineKeyboardButton('–∑–∞ —á–∞—Å –¥–æ', callback_data=f'{prefix};60'), InlineKeyboardButton('–∑–∞ 2 —á–∞—Å–∞', callback_data=f'{prefix};120'))
    keyb.add(InlineKeyboardButton('–∑–∞ 24 —á–∞—Å–∞', callback_data=f'{prefix};1440'), InlineKeyboardButton('–∑–∞ –Ω–µ–¥–µ–ª—é', callback_data=f'{prefix};10080'))
    keyb.add(InlineKeyboardButton('–Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å', callback_data=f'{prefix};n'))
    return keyb


# universal yes/no keyboard
def keybool(prefix:str):
    """
    Default data separator is ';' easy to replace

    :param prefix: part of callback data before y/n, without last separator
    :return: InlineKeyboardMarkup two buttons in the same line
    """
    keyb = InlineKeyboardMarkup()
    keyb.add(InlineKeyboardButton('–î–∞', callback_data=prefix+';y'),
             InlineKeyboardButton('–ù–µ—Ç', callback_data=prefix+';n'))
    return keyb


# universal time choice keyboard
def time_keyb(prefix, min_time=0):
    keyb = InlineKeyboardMarkup()
    time_list = [time for time in range(0, 24)]
    keyb.row_width = 4
    btn_list = [InlineKeyboardButton(f'{t}:00', callback_data=f'{prefix};{t}') for t in range(0, 24)]
    for i in range(3 - len(btn_list) % 4):
        btn_list.append(InlineKeyboardButton(f' ', callback_data='text_btn'))
    for i in range(len(btn_list) // 4):
        keyb.add(*btn_list[i * 4:i * 4 + 4])
    return keyb


# repeat interval choice keyboard
def repeat_keyb(prefix):
    keyb = InlineKeyboardMarkup()
    keyb.add(InlineKeyboardButton('—Ä–∞–∑ –≤ 5 –º–∏–Ω.', callback_data=prefix+';5'),
             InlineKeyboardButton('—Ä–∞–∑ –≤ 10 –º–∏–Ω.', callback_data=prefix+';10'),
             InlineKeyboardButton('—Ä–∞–∑ –≤ 15 –º–∏–Ω.', callback_data=prefix+';15'))
    keyb.add(InlineKeyboardButton('—Ä–∞–∑ –≤ 30 –º–∏–Ω.', callback_data=prefix+';30'),
             InlineKeyboardButton('—Ä–∞–∑ –≤ —á–∞—Å', callback_data=prefix+';60'),
             InlineKeyboardButton('—Ä–∞–∑ –≤ 3 —á–∞—Å–∞', callback_data=prefix+';180'))
    keyb.add(InlineKeyboardButton('—Ä–∞–∑ –≤ –¥–µ–Ω—å', callback_data=prefix+';1440'),
             InlineKeyboardButton('—Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é', callback_data=prefix+';10080'))
    keyb.add(InlineKeyboardButton('–Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å', callback_data=prefix+';n'))
    return keyb


# task types keyb
def task_types_keyb(prefix):
    keyb = InlineKeyboardMarkup()
    keyb.add(InlineKeyboardButton('–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ', callback_data=prefix+';start'))
    keyb.add(InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∞—é—â–∏–µ—Å—è', callback_data=prefix+';end'))
    if 'week' not in prefix:
        keyb.add(InlineKeyboardButton('–¢–µ–∫—É—â–∏–µ', callback_data=prefix+';actv'))
    keyb.add(InlineKeyboardButton('–ú–µ–Ω—é', callback_data='u;menu'))
    return keyb


# task list slider
def slider(prefix, listy, page=0, row_num=5, itemprefix='', menu_callback_data = 'menu'):
    '''

    :param prefix: part of callback data before item callback, without last separator
    :param listy: list of tuples [(btn_txt, btn_data), ...] (use list(dict.items()) to convert dict to list of tuples
    :param page: page number
    :param row_num: number of rows
    :param itemprefix: prefix for item btn_data(default=prefix param)
    :param menu_callback_data: callback for menu button
    :return: keyboard
    '''
    keyb = InlineKeyboardMarkup()

    if not itemprefix:
        itemprefix = prefix

    if listy:
        # reduce amount of rows by 1 if last page contains only one item (looks ugly)
        if len(listy) % row_num == 1 and len(listy) % (row_num - 1) != 1:  # check if it helps
            row_num -= 1
        # last page item index
        if ((page + 1) * row_num) < len(listy):
            end = ((page + 1) * row_num)
        else:
            end = len(listy)
        # page gen
        for i in range(page*row_num, end):
            keyb.add(InlineKeyboardButton(listy[i][0], callback_data=f'{itemprefix};{listy[i][1]}'))
        if page == 0 and end != len(listy):
            keyb.add(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥", callback_data=f'{prefix};m;{str(page + 1)}'))   # m - for move to page
        elif page != 0 and end == len(listy):
            keyb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f'{prefix};m;{str(page - 1)}'))
        elif page != 0:
            keyb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f'{prefix};m;{str(page - 1)}'),
                     InlineKeyboardButton("–í–ø–µ—Ä–µ–¥", callback_data=f'{prefix};m;{str(page + 1)}'))
    if prefix == 'u;t;new;5':
        keyb.add(InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —É–≤–µ–¥–æ–º–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö', callback_data=prefix+';save'))
    keyb.add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data=menu_callback_data))
    return keyb


def show_keyb(last_cb, task_id):
    keyb = InlineKeyboardMarkup()
    if not db.get_item('Tasks', task_id)[0][7]:
        keyb.add(InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É',  callback_data=f'u;t;fin;{task_id}'))
    keyb.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=last_cb),
             InlineKeyboardButton("–ú–µ–Ω—é", callback_data='u;menu'),
             InlineKeyboardButton('–ò–∑–º–µ–Ω—Ç—å –∑–∞–¥–∞—á—É', callback_data=f'u;t;change;{task_id}'))
    return keyb


# keyboard inside notification
def notification_keyb(task_id, is_assignment=False):
    keyb = InlineKeyboardMarkup()
    if not is_assignment:
        keyb.add(InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data=f'u;t;fin;{task_id}'))
        keyb.add(InlineKeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä', callback_data=f'u;t;n;r;off;{task_id}'))
    keyb.add(InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—å', callback_data=f'u;t;n;close'))
    return keyb


proj_keyb = InlineKeyboardMarkup()
proj_keyb.add(InlineKeyboardButton('–ü—Ä–æ–µ–∫—Ç—ã –≤ –∫–æ—Ç–æ—Ä—ã—Ö —è —É—á–∞—Å—Ç–≤—É—é', callback_data='p;a'))
proj_keyb.add(InlineKeyboardButton('–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã', callback_data='p;o'))
proj_keyb.add(InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', callback_data='p;new'))
proj_keyb.add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data='u;menu'))


def show_proj_keyb(prefix, is_owned):
    keyb = InlineKeyboardMarkup()
    #if db.get_project_tasks(int(prefix.split(';')[-1])):
    keyb.add(InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏", callback_data=prefix+';tasks'))
    if is_owned:
        if not db.get_item('Projects', int(prefix.split(';')[-1]))[0][3]:
            keyb.add(InlineKeyboardButton('–ü—Ä–∏–≤—è–∑–∞—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –∫ –ø—Ä–æ–µ–∫—Ç—É', callback_data=f"p;connect;{prefix.split(';')[-1]}"))
        keyb.add(InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data='u;t;new;0r'))
        keyb.add(InlineKeyboardButton('–£–¥–∏–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç', callback_data=prefix+';del'))
    keyb.add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data='u;menu'))
    return keyb


def change_task_keyb(prefix, is_owned=False):
    keyb = InlineKeyboardMarkup()
    task = db.get_item('Tasks', int(prefix.split(';')[3]))
    if task:
        task = task[0]
        if is_owned:
            keyb.add(InlineKeyboardButton('–ù–∞–∑–≤–∞–Ω–∏–µ', callback_data=f'{prefix};name'),
                     InlineKeyboardButton('–ö–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data=f'{prefix};cat'),
                     InlineKeyboardButton('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', callback_data=f'{prefix};prior')
                     )

            keyb.add(InlineKeyboardButton('–î–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞', callback_data=f'{prefix};start'),
                     InlineKeyboardButton('–î–∞—Ç—É –∏ –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞', callback_data=f'{prefix};end'))
        if task[3]:
            keyb.add(InlineKeyboardButton('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫ –Ω–∞—á–∞–ª—É –∑–∞–¥–∞—á–∏', callback_data=f'{prefix};not_start'))
        if task[4]:
            keyb.add(InlineKeyboardButton('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ü—É –∑–∞–¥–∞—á–∏', callback_data=f'{prefix};not_end'))
        if task[9] or task[10]:
            keyb.add(InlineKeyboardButton('–ü–æ–≤—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', callback_data=f'{prefix};rep'))
    keyb.add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data='u;menu'))
    return keyb

